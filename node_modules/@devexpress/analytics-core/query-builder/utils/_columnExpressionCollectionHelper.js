/**
* DevExpress Analytics (query-builder\utils\_columnExpressionCollectionHelper.js)
* Version:  21.2.6
* Build date: Feb 28, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var columnExpression_1 = require("../elements/columnExpression");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var _getNameHelpers_1 = require("../../core/internal/_getNameHelpers");
var ColumnExpressionCollectionHelper = (function () {
    function ColumnExpressionCollectionHelper() {
    }
    ColumnExpressionCollectionHelper.find = function (collection, tableName, columnName) {
        return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) { return item.column() === columnName && item.table() === tableName; });
    };
    ColumnExpressionCollectionHelper.findByName = function (collection, actualName) {
        return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) { return item.actualName() === actualName; });
    };
    ColumnExpressionCollectionHelper.removeDependend = function (collection, tableName) {
        collection.remove(function (item) { return item.isDepended(tableName); });
    };
    ColumnExpressionCollectionHelper.setUniqueAlias = function (collection, alias) {
        if (ColumnExpressionCollectionHelper.findByName(collection, alias)) {
            return _getNameHelpers_1.getUniqueName(collection().map(function (item) { return item.actualName(); }), alias + '_');
        }
        return alias;
    };
    ColumnExpressionCollectionHelper.addNew = function (query, collection, table, column) {
        var newItem = new columnExpression_1.ColumnExpression({ '@Table': table, '@Name': column, '@ItemType': 'Column' }, query);
        if (query.columns === collection && !newItem.alias() && ColumnExpressionCollectionHelper.findByName(collection, newItem.actualName())) {
            newItem.alias(this.setUniqueAlias(collection, newItem.table() + '_' + newItem.column()));
        }
        collection.push(newItem);
        return newItem;
    };
    ColumnExpressionCollectionHelper.remove = function (collection, tableName, columnName) {
        collection.remove(function (item) { return item.column() === columnName && item.table() === tableName; });
    };
    return ColumnExpressionCollectionHelper;
}());
exports.ColumnExpressionCollectionHelper = ColumnExpressionCollectionHelper;
