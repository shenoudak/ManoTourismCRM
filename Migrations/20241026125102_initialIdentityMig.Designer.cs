// <auto-generated />
using System;
using ManoTourism.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManoTourism.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241026125102_initialIdentityMig")]
    partial class initialIdentityMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "897f7c7a-cce6-4503-a3f9-aee92acc8d33",
                            ConcurrencyStamp = "897f7c7a-cce6-4503-a3f9-aee92acc8d33",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "6f826707-3414-46e3-b80c-0bc28f310dbb",
                            ConcurrencyStamp = "6f826707-3414-46e3-b80c-0bc28f310dbb",
                            Name = "employee",
                            NormalizedName = "employee"
                        },
                        new
                        {
                            Id = "6407b04c-cf88-4cb0-847e-d5d88340da0c",
                            ConcurrencyStamp = "6407b04c-cf88-4cb0-847e-d5d88340da0c",
                            Name = "lead",
                            NormalizedName = "lead"
                        },
                        new
                        {
                            Id = "b5a68ed4-507a-48f6-8347-ba7c2c840518",
                            ConcurrencyStamp = "b5a68ed4-507a-48f6-8347-ba7c2c840518",
                            Name = "accountant",
                            NormalizedName = "accountant"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a0325d4b-2a04-4d33-8e01-6f6f3afb3d8f",
                            RoleId = "6407b04c-cf88-4cb0-847e-d5d88340da0c"
                        },
                        new
                        {
                            UserId = "acd2498f-9519-400d-b43d-5a8ea7308cd5",
                            RoleId = "897f7c7a-cce6-4503-a3f9-aee92acc8d33"
                        },
                        new
                        {
                            UserId = "5e479daa-e034-4990-acf0-c3245efc4584",
                            RoleId = "b5a68ed4-507a-48f6-8347-ba7c2c840518"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManoTourism.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "a0325d4b-2a04-4d33-8e01-6f6f3afb3d8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8b2860d-e6cd-4f1e-aa34-210695509530",
                            Email = "sitedesign@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SITEDESIGN@GMAIL.COM",
                            NormalizedUserName = "SITEDESIGN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHDQ/dA9O5pnmB0hWdgYVh5Wb2aff3nn6oFyoL/nHXb4huEge7FJf0wmQmDD2aMEkQ==",
                            PhoneNumber = "9080706050",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ed22287-6347-47ae-b226-e08702f1d8dc",
                            TwoFactorEnabled = false,
                            UserName = "sitedesign@gmail.com",
                            EntityId = 0,
                            FullName = "Shenouda && Mary",
                            Pic = "Pic1.png"
                        },
                        new
                        {
                            Id = "acd2498f-9519-400d-b43d-5a8ea7308cd5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c3ac319-076b-4ea3-8bc4-034906a164c4",
                            Email = "manoadmin@info.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANOADMIN@INFO.COM",
                            NormalizedUserName = "MANOADMIN@INFO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+tZ705pCOpzmCmDGX41JjhJRnmCtXJ//Yz8qZFwmgStLIr6jHA4qBcM67JTLv2yQ==",
                            PhoneNumber = "9080706050",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac287ef7-b80c-4905-8424-9a29769e3f81",
                            TwoFactorEnabled = false,
                            UserName = "manoadmin@info.com",
                            EntityId = 0,
                            FullName = "admin",
                            Pic = "Pic1.png"
                        },
                        new
                        {
                            Id = "5e479daa-e034-4990-acf0-c3245efc4584",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aadbe1ce-e1cd-4c3b-9cf0-b0ceb268ccf6",
                            Email = "accountant@info.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNTANT@INFO.COM",
                            NormalizedUserName = "ACCOUNTANT@INFO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPyVEbwkGiWuwk6tOMUNKS1fuX0ycASLNvDlINHG2S4+bRwv+OusJu31asbHDHL5qA==",
                            PhoneNumber = "6040302010",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83dbe2bf-5b8a-44fb-a3db-8d4a26d0152c",
                            TwoFactorEnabled = false,
                            UserName = "accountant@info.com",
                            EntityId = 0,
                            FullName = "Accountant",
                            Pic = "Pic1.png"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
